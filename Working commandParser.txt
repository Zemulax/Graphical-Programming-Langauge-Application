

namespace MyAssignment
{
    /// <summary>
    /// this class parses and executes all commands
    /// </summary>
    public class CommandParser  : Shape
    {
        
        public List<string> errorMessages = new(); //collects exceptions
        private readonly Graphics graphics = null;
        readonly int[] cordinates = new int[3];
        private readonly bool fill;
        private Color colour = Color.White;
        readonly Dictionary<string, int> collectVariables = new();
        readonly Variables variables= new();


        public CommandParser()
        {
           
        }

        /// <summary>
        /// Parsecommander class constructor interprets and executes commands using various method calls
        /// </summary>
        /// <param name="points">the x and y axis to set the pen to</param>
        /// <param name="graphics">surface for drawing</param>
        /// <param name="commands">commands that determine execution</param>
        public CommandParser(Point points,Graphics graphics,string[] commands)  : base(points)
        {
            this.graphics = graphics;
            Colours colours = new(colour);
            int parameter1;
            int parameter2;

            Point generalUsePoints = new();

            for (int i = 0; i < commands.Length; i++)
            {
                try
                {
                    switch (commands[i].ToLower())
                    {
                        case "pen red":
                            colour = Color.Red;
                            colours.ShapePen = new(Color.Red, 5);
                            colours.ShapeBrush = new SolidBrush(Color.Red);
                            continue;

                        case "pen green":
                            colour = Color.Red;
                            colours.ShapePen = new(Color.Green, 5);
                            colours.ShapeBrush = new SolidBrush(Color.Green);
                            continue;

                        case "pen magenta":
                            colour = Color.Red;
                            colours.ShapePen = new(Color.Magenta, 5);
                            colours.ShapeBrush = new SolidBrush(Color.Magenta);
                            continue;

                        case "pen yellow":
                            colour = Color.Red;
                            colours.ShapePen = new(Color.Yellow, 5);
                            colours.ShapeBrush = new SolidBrush(Color.Yellow);
                            continue;

                        case "default":
                            colour = Color.White;
                            colours.ShapePen = new(Color.White, 5);
                            colours.ShapeBrush = new SolidBrush(Color.White);
                            continue;

                        case "fill on":
                            fill = true;
                            continue;

                        case "fill off":
                            fill = false;
                            continue;

                        case "clear":
                            graphics.Clear(Color.MidnightBlue);
                            continue;

                        case "reset":
                            points.X = 0;
                            points.Y = 0;
                            ShapePoint = points;
                            continue;
                    }
                    if (commands[i].Contains('='))
                    {
                        try
                        {
                            string[] splitVariable = commands[i].Split('=');//mozay = 90
                            collectVariables.Add(splitVariable[0], int.Parse(splitVariable[1]));
                            i++;
                            if (commands[i].Contains('='))
                            {
                                string[] splitVariable1 = commands[i].Split('=');
                                collectVariables.Add(splitVariable1[0], int.Parse(splitVariable1[1]));
                                
                            }
                            else
                            {
                                MessageBox.Show("Atleast declare 2 variables");
                                break;
                                
                            }
                            variables.VariableProcessor(collectVariables);
                        }
                        catch (Exception) { MessageBox.Show("more variables than expected"); break; }
                        
                        continue;
                    }
                    //using the variables now
                    for (int k = 0; k < collectVariables.Count; k++)
                    {
                        string[] splittingCommand = commands[i].Split(' ');//rectangle x y

                        for (int s = 1; s < splittingCommand.Length; s++)
                        {
                            if (splittingCommand.Length == 3)
                            {
                                if (collectVariables.Keys.ElementAt(k).Contains(splittingCommand[s]))
                                {
                                    parameter1 = Variables.VariableInts[0];
                                    cordinates[0] = parameter1;
                                    k++;
                                    s++;
                                    if (collectVariables.Keys.ElementAt(k).Contains(splittingCommand[s]))
                                    {
                                        parameter2 = Variables.VariableInts[1];
                                        cordinates[1] = parameter2;
                                    }
                                    else
                                    {
                                        MessageBox.Show("failed second instead of elemented second");

                                    }
                                }
                                else
                                {
                                    MessageBox.Show("failed");
                                }
                            }
                            else if (splittingCommand.Length == 2)
                            {
                                if (collectVariables.Keys.ElementAt(k).Contains(splittingCommand[1]))
                                {
                                    parameter1 = Variables.VariableInts[0];
                                    cordinates[0] = parameter1;
                                }
                            }
                        }

                        switch (splittingCommand[0])
                        {
                            case "mozay":
                                MessageBox.Show("mozay cased");
                                break;
                        }
                        continue;

                    }

                    string[] separators = { " ", "," };
                    IEnumerable<string> values = commands[i].Split(separators, StringSplitOptions.RemoveEmptyEntries); //split the first item in the array by two delimiters
                    string firstCommand = values.First().ToLower();

                    
                    parameter1 = int.Parse(values.Skip(1).First()); //skip the first value which is the "firstCommand",get the second value
                    parameter2  = int.Parse(values.Last());

                    if (parameter1 >= 515 || parameter1 < 0 || parameter2 > 515 || parameter2 < 0)
                    {
                        throw new ArgumentOutOfRangeException(" \nValue out of bounds. limit 515 ");
                    }

                    cordinates[0] = parameter1;
                    cordinates[1] = parameter2;

                    

                    //shape objects instantiation
                    Cursor cursor = new(ShapePoint);
                    DrawTo drawto = new(ShapePoint, generalUsePoints);
                    Rectangle rectangle1 = new(ShapePoint, cordinates[0], cordinates[1]);
                    Triangle triangle = new(ShapePoint);
                    Circle circle = new(ShapePoint, parameter1);

                    //this section checks for processed commands with integer parameters 
                    switch (firstCommand.ToLower()) //uniform all input
                    {
                        case "rectangle":
                            rectangle1.DrawShape(graphics, fill, colours.ShapePen, colours.ShapeBrush);
                            break;

                        case "circle":
                            circle.DrawShape(graphics, fill, colours.ShapePen, colours.ShapeBrush);
                            break;

                        case "triangle":
                            triangle.DrawShape(graphics, fill, colours.ShapePen, colours.ShapeBrush);
                            break;

                        case "moveto":

                            cursor.Points = generalUsePoints;
                            ShapePoint = cursor.Points;
                            break;

                        case "drawto":
                            drawto.DrawShape(graphics, fill, colours.ShapePen, colours.ShapeBrush);
                            break;

                        default:
                            errorMessages.Add("Unrecognised command at: " + commands[i]);
                            break;
                    }



                    


                }

                catch(FormatException)
                {
                        errorMessages.Add("Incorrect parameter at command: " + commands[i]);
                }

                catch(InvalidOperationException)
                {
                      errorMessages.Add("Missing Parameter at command: " + commands[i]);
                }

                catch (ArgumentOutOfRangeException)
                {
                    errorMessages.Add("value too large");
                }
            }
        }
        
        /// <summary>
        /// sets and gets the coordiated into the array
        /// </summary>
        public int[] Cordinates
        {
            get { return cordinates; }
        }

        /// <summary>
        /// unimplemented method
        /// </summary>
        /// <param name="graphics"></param>
        /// <param name="fill"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void DrawShape(Graphics graphics, bool fill,Pen shapePen,Brush shapeBrush)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// sets the value of fill to true or false
        /// </summary>
        public bool Fill
        {
            get { return fill; }
            
        }

        /// <summary>
        /// color property used by the color class
        /// sets and gets the colour
        /// </summary>
        public Color Colour
        {
            get { return colour; }
            set { colour = value; }
        }
    }
}
